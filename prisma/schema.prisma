// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.text annotations in model Account below
    // Further reading: 
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// The TeoAlem version of "post"
model Formula {
    id          String   @id @default(uuid())
    title       String
    description String?
    definition  String?
    // To return `Date`s intact through the API we need to add data transformers
    // https://trpc.io/docs/data-transformers
    createdAt   DateTime @default(now())
    updatedAt   DateTime @default(now()) @updatedAt
    // Formula Category
    categoryId  String
    category    Category @relation(fields: [categoryId], references: [id])
    // Formula Author
    authorId    String
    authorName  String
    authorImage String
    author      User     @relation(fields: [authorId], references: [id])
}

// Each formula has 1 category, e.g. Trygonometry
model Category {
    id        String    @id @default(uuid())
    icon      String?
    name      String
    createdAt DateTime  @default(now())
    formulas  Formula[]
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    formulas      Formula[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
